@page "/settings"
@inject IJSRuntime JS

<PageTitle>Innstillingar</PageTitle>

<h1>Innstillingar</h1>

<div>
@if (ConnectionString != null) {
    <div>
    <label for="connection-string">Token</label>
    <input type="text" id="connection-string" @bind="ConnectionString" />
    </div>
    <div>
    <label for="server">Server</label>
    <input type="url" id="server" @bind="Server" />
    </div>
    <div>
    @if (Edited) {
        <button type="button" @onclick="SaveConnectionData">Save</button>
    } else {
        <button type="button" @onclick="SaveConnectionData" disabled>Save</button>
    }
    </div>
} else {
    <p>Loading settings...</p>
}
</div>

@code {
    private string? connectionString { get; set; }
    public string? ConnectionString { get => connectionString; private set {
        Edited = !(connectionString == null);
        connectionString = value;
    } }
    private string? server { get; set; }
    public string? Server { get => server; private set {
        Edited = !(server == null);
        server = value;
    } }
    public bool Edited = false;

    override protected async Task OnInitializedAsync() {
        this.GetConnectionData();
    }

    public async void GetConnectionData() {
        ConnectionString = new(await JS.InvokeAsync<string>("getCookie", "accessToken"));
        Console.WriteLine("Connection string: " + ConnectionString);
        Server = new(await JS.InvokeAsync<string>("getCookie", "serverUrl"));
        Console.WriteLine("Server URL: " + Server);
        StateHasChanged();
    }
    
    public async void SaveConnectionData() {
        string newValue = ConnectionString!;
        Console.WriteLine("Saving connection string: " + newValue);
        await JS.InvokeAsync<string>("setCookie", "accessToken", ConnectionString);
        ConnectionString = newValue;
        await JS.InvokeAsync<string>("setCookie", "serverUrl", Server);
        Console.WriteLine("Server URL: " + Server);
        Edited = false;
        StateHasChanged();
    }
}
