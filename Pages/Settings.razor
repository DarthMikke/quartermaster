@page "/settings"
@inject IJSRuntime JS

<PageTitle>Innstillingar</PageTitle>

<h1>Innstillingar</h1>

<div>
@if (ConnectionString != null) {
    <label for="connection-string">Tilkoplingsdata</label>
    <input type="text" id="connection-string" @bind="ConnectionString" />
    @if (Edited) {
        <button type="button" @onclick="SaveConnectionString">Save</button>
    } else {
        <button type="button" @onclick="SaveConnectionString" disabled>Save</button>
    }
} else {
    <p>Loading settings...</p>
}
</div>

@code {
    private string? connectionString { get; set; }
    public string? ConnectionString { get => connectionString; private set {
        Edited = !(connectionString == null);
        connectionString = value;
    } }
    public bool Edited = false;

    override protected Task OnInitializedAsync() {
        this.GetConnectionString();

        return base.OnInitializedAsync();
    }

    public async void GetConnectionString() {
        ConnectionString = new(await JS.InvokeAsync<string>("getCookie", "connectionString"));
        Console.WriteLine("Connection string: " + ConnectionString);
        StateHasChanged();
    }
    
    public async void SaveConnectionString() {
        string newValue = ConnectionString!;
        Console.WriteLine("Saving connection string: " + newValue);
        await JS.InvokeAsync<string>("setCookie", "connectionString", ConnectionString);
        ConnectionString = newValue;
        Edited = false;
        StateHasChanged();
    }
}
